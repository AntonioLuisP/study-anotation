import React, { useState } from 'react'
import { useHistory } from 'react-router-dom';
import {
  CButton,
  CCardBody,
  CCol,
  CModal,
  CModalBody,
  CModalFooter,
  CModalHeader,
  CModalTitle,
  CForm,
  CFormGroup,
  CTextarea,
  CInput,
  CLabel,
} from '@coreui/react'

const Modal = ({ handleClose, show, children }) => {
  const history = useHistory();

  const [name, setName] = useState('')
  const [description, setDescription] = useState('')

  function handleCreate(e) {
    e.preventDefault();
    history.push("/projects")
  }

  return (
    <CModal
      show={show}
      onClose={handleClose}
    >
      <CModalHeader closeButton >
        <CModalTitle>Novo Projeto</CModalTitle>
      </CModalHeader>
      <CForm onSubmit={handleCreate} className="form-horizontal">
        <CModalBody>
          <CCardBody>
            <CFormGroup row>
              <CCol md="3">
                <CLabel htmlFor="text-input">Nome</CLabel>
              </CCol>
              <CCol xs="12" md="9">
                <CInput id="text-input" name="text-input" placeholder="Nome" value={children.name} />
                </CCol>
            </CFormGroup>
            <CFormGroup row>
              <CCol md="3">
                <CLabel htmlFor="textarea-input">Descrição</CLabel>
              </CCol>
              <CCol xs="12" md="9">
                <CTextarea
                  name="textarea-input"
                  id="textarea-input"
                  rows="9"
                  placeholder="Descrição..."
                  value={children.description}
                />
              </CCol>
            </CFormGroup>
          </CCardBody>
        </CModalBody>
        <CModalFooter>
          <CButton
            type="submit"
            color="success"
          >
            Salvar
          </CButton>
          <CButton
            color="secondary"
            onClick={handleClose}
          >
            Cancelar
          </CButton>
        </CModalFooter>
      </CForm>
    </CModal>
  )
}

export default Modal







import React, { useState, useEffect } from 'react'
import { useHistory, useLocation } from 'react-router-dom'
import api from "../../services/api"

import {
  CButton,
  CButtonGroup,
  CCard,
  CCol,
  CDataTable,
  CRow,
  CPagination
} from '@coreui/react'

const fields = [{ key: 'name', _classes: 'font-weight-bold' }, 'created_at', 'actions']

const Anotations = () => {
  const history = useHistory()
  const queryUrl = useLocation().search
  const queryPage = queryUrl.match(/page=([0-9]+)/, '')
  // const queryField = queryUrl.match(/page=([0-9]+)/, '')
  // const querySort  = queryUrl.match(/page=([0-9]+)/, '')
  // const queryQuantidade  = queryUrl.match(/page=([0-9]+)/, '')
  // const queryPage = useLocation().search.match(/([^\?]+)(\?.*)?/g, '')


  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)
  // const currentField = Number(queryField && queryField[1] ? queryField[1] : 1)
  // const currentSort = Number(querySort && querySort[1] ? querySort[1] : 1)
  // const currentQuantidade = Number(queryQuantidade && queryQuantidade[1] ? queryQuantidade[1] : 1)
  const [page, setPage] = useState(currentPage)
  const [projects, setProjects] = useState([])
  const [links, setLinks] = useState([])


  useEffect(() => {
    api.get('project')
      .then(response => {
        if (response.status === 200) {
          const search= response.data
          console.log(search.data)
          setProjects(search.data)
          setLinks(search.links)
        }
      })  
  }, [])

  const pageChange = newPage => {
    currentPage !== newPage && history.push(`/projects?page=${newPage}`)
  }

  useEffect(() => {
    currentPage !== page && setPage(currentPage)
  }, [currentPage, page])



  async function handleDelete(id) {
    try {
      await api.delete(`/project/${id}`, {})
      setProjects(projects.filter(project => project.id !== id))
    } catch (error) {
      alert("Erro ao deletar o caso, tente novamente")
      console.log(error)
    }
  }

  return (
    <CRow>
      <CCol xl={12}>
        <CCard>
          <CDataTable
            items={projects}
            fields={fields}
            hover
            striped
            itemsPerPage={5}
            activePage={page}
            clickableRows
            scopedSlots={{
              'actions':
                (item) => (
                  <td>
                    <CButtonGroup>
                      <CButton color="info" onClick={() => history.push('/projects/' + item.id)}>Ver</CButton>
                      <CButton color="warning" onClick={() => history.push('/projects/' + item.id + '/edit')}>Edit</CButton>
                      <CButton color="danger" onClick={() => handleDelete(item.id)}>Delete</CButton>
                    </CButtonGroup>
                  </td>
                )
            }}
          />
          <CPagination
            activePage={page}
            onActivePageChange={pageChange}
            pages={5}
            doubleArrows={false}
            align="center"
          />
        </CCard>
      </CCol>
    </CRow>
  )
}

export default Projects
